/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : Human
 **/
public class Human extends Component implements IHuman_TTYin_temp, IHuman_TTYout {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

public synchronized void SwitchOn_via_TTYin_temp(int OnOffMsg_SwitchOn_did_var){
final Event _msg = SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var);
_msg.setPort(TTYin_temp_port);
receive(_msg);
}

public synchronized void SwitchOff_via_TTYin_temp(int OnOffMsg_SwitchOff_did_var){
final Event _msg = SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var);
_msg.setPort(TTYin_temp_port);
receive(_msg);
}

public synchronized void set_temperature_via_TTYin_temp(double TemperatureMsg_set_temperature_t_var){
final Event _msg = set_temperatureType.instantiate(TemperatureMsg_set_temperature_t_var);
_msg.setPort(TTYin_temp_port);
receive(_msg);
}

public synchronized void set_delta_via_TTYin_temp(double TemperatureMsg_set_delta_dlta_var){
final Event _msg = set_deltaType.instantiate(TemperatureMsg_set_delta_dlta_var);
_msg.setPort(TTYin_temp_port);
receive(_msg);
}

public synchronized void fetch_temp_via_TTYin_temp(){
final Event _msg = fetch_tempType.instantiate();
_msg.setPort(TTYin_temp_port);
receive(_msg);
}

public synchronized void temperature_via_TTYout(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
final Event _msg = temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
_msg.setPort(TTYout_port);
receive(_msg);
}

public synchronized void prompt_via_TTYout(String GeneralMsg_prompt_txt_var){
final Event _msg = promptType.instantiate(GeneralMsg_prompt_txt_var);
_msg.setPort(TTYout_port);
receive(_msg);
}

private void sendSwitchOn_via_send_cmd_temp(int OnOffMsg_SwitchOn_did_var){
send_cmd_temp_port.send(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var));
}

private void sendSwitchOff_via_send_cmd_temp(int OnOffMsg_SwitchOff_did_var){
send_cmd_temp_port.send(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var));
}

private void sendSet_temperature_via_send_cmd_temp(double TemperatureMsg_set_temperature_t_var){
send_cmd_temp_port.send(set_temperatureType.instantiate(TemperatureMsg_set_temperature_t_var));
}

private void sendSet_delta_via_send_cmd_temp(double TemperatureMsg_set_delta_dlta_var){
send_cmd_temp_port.send(set_deltaType.instantiate(TemperatureMsg_set_delta_dlta_var));
}

private void sendFetch_temp_via_send_cmd_temp(){
send_cmd_temp_port.send(fetch_tempType.instantiate());
}

private void sendTemperature_via_get_values(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
get_values_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
}

private void sendPrompt_via_get_values(String GeneralMsg_prompt_txt_var){
get_values_port.send(promptType.instantiate(GeneralMsg_prompt_txt_var));
}

//Attributes
//Ports
private Port send_cmd_temp_port;
private Port TTYin_temp_port;
private Port get_values_port;
private Port TTYout_port;
//Message types
protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
protected final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
protected final Set_deltaMessageType set_deltaType = new Set_deltaMessageType();
protected final Fetch_tempMessageType fetch_tempType = new Fetch_tempMessageType();
protected final Iamalive1MessageType iamalive1Type = new Iamalive1MessageType();
protected final Iamalive2MessageType iamalive2Type = new Iamalive2MessageType();
protected final PromptMessageType promptType = new PromptMessageType();
protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
//Empty Constructor
public Human() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getSend_cmd_temp_port() {
return send_cmd_temp_port;
}
public Port getTTYin_temp_port() {
return TTYin_temp_port;
}
public Port getGet_values_port() {
return get_values_port;
}
public Port getTTYout_port() {
return TTYout_port;
}
private CompositeState buildHuman_HumanBehavior(){
final AtomicState state_Human_HumanBehavior_Idle = new AtomicState("Idle");
Transition h2068780306 = new Transition();
h2068780306.from(state_Human_HumanBehavior_Idle).to(state_Human_HumanBehavior_Idle);
h2068780306.event(SwitchOnType);
h2068780306.port(TTYin_temp_port);
h2068780306.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_send_cmd_temp((int) (SwitchOn.did));
});

Transition h1225761077 = new Transition();
h1225761077.from(state_Human_HumanBehavior_Idle).to(state_Human_HumanBehavior_Idle);
h1225761077.event(SwitchOffType);
h1225761077.port(TTYin_temp_port);
h1225761077.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_send_cmd_temp((int) (SwitchOff.did));
});

Transition h631013363 = new Transition();
h631013363.from(state_Human_HumanBehavior_Idle).to(state_Human_HumanBehavior_Idle);
h631013363.event(set_temperatureType);
h631013363.port(TTYin_temp_port);
h631013363.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
sendSet_temperature_via_send_cmd_temp((double) (set_temperature.t));
});

Transition h287461508 = new Transition();
h287461508.from(state_Human_HumanBehavior_Idle).to(state_Human_HumanBehavior_Idle);
h287461508.event(set_deltaType);
h287461508.port(TTYin_temp_port);
h287461508.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
sendSet_delta_via_send_cmd_temp((double) (set_delta.dlta));
});

Transition h1819049701 = new Transition();
h1819049701.from(state_Human_HumanBehavior_Idle).to(state_Human_HumanBehavior_Idle);
h1819049701.event(fetch_tempType);
h1819049701.port(TTYin_temp_port);
h1819049701.action((Event e)->{
sendFetch_temp_via_send_cmd_temp();
});

Transition h89905617 = new Transition();
h89905617.from(state_Human_HumanBehavior_Idle).to(state_Human_HumanBehavior_Idle);
h89905617.event(temperatureType);
h89905617.port(TTYout_port);
h89905617.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendTemperature_via_get_values((int) (temperature.id), (String) (temperature.txt), (double) (temperature.t));
});

Transition h60456959 = new Transition();
h60456959.from(state_Human_HumanBehavior_Idle).to(state_Human_HumanBehavior_Idle);
h60456959.event(promptType);
h60456959.port(TTYout_port);
h60456959.action((Event e)->{
final PromptMessageType.PromptMessage prompt = (PromptMessageType.PromptMessage) e;
System.out.println(""+(prompt.txt));
});

final CompositeState state_Human_HumanBehavior = new CompositeState("HumanBehavior");
state_Human_HumanBehavior.onEntry(()->{
});
state_Human_HumanBehavior.add(state_Human_HumanBehavior_Idle);
state_Human_HumanBehavior.initial(state_Human_HumanBehavior_Idle);
return state_Human_HumanBehavior;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
send_cmd_temp_port = new Port("send_cmd_temp", this);
TTYin_temp_port = new Port("TTYin_temp", this);
get_values_port = new Port("get_values", this);
TTYout_port = new Port("TTYout", this);
} else {
send_cmd_temp_port = ((Human)root).send_cmd_temp_port;
TTYin_temp_port = ((Human)root).TTYin_temp_port;
get_values_port = ((Human)root).get_values_port;
TTYout_port = ((Human)root).TTYout_port;
}
if (session == null){
//Init state machine
behavior = buildHuman_HumanBehavior();
}
return this;
}

}
