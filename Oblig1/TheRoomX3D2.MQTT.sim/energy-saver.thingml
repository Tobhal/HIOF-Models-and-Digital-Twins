import "datatypes.thingml" from stl

import "pim_messages.thingml"

thing Energy_saver includes TemperatureMsg, LuminanceMsg, GeneralMsg {
    required port provide_cmd {
        sends set_temperature,
              set_delta,
              fetch_temp,
              SwitchOn,
              SwitchOff
    }

    provided port get_cmd {
        receives temperature,
                 temperature_delta,
                 fetch_temp,
                 switch_on,
                 switch_off
    }

    provided port get_luminence {
        receives luminence
    }

    provided port get_time {
        receives time
    }

    property temp:Double = 20           // Store comfort temprature
    property last_lum: Double = 1000    // Last recored luminence value

    property lights_off_temp:Double = 2 // Store temprature offsett for when lights are off
    property night:Double = 8           // Store temprature offsett for when there is night

    property lum_thres: Double = 1000   // Threshold for when the room is dart or not

    statechart ES_behavior init Idle {
        on entry do
            print("Running Energy saver (ES) \n")
        end

        state Idle {
            // Handle CMD
            transition -> Idle
            event get_temp:get_cmd?temperature
            action do
                temp = get_temp.t

                if (last_lum > lum_thres) do 
                    provide_cmd!set_temperature(temp)
                end

                if (last_lum <= lum_thres) do
                    provide_cmd!set_temperature(temp - lights_off_temp)
                end
            end

            transition -> Idle
            event temp_delta:get_cmd?temperature_delta
            action do 
                provide_cmd!set_delta(temp_delta)
            end

            transition -> Idle
            event get_cmd?fetch_temp
            action do 
                provide_cmd!fetch_temp()
            end

            transition -> Idle
            event id:get_cmd?switch_on
            action do 
                provide_cmd!switch_on(id)
            end

            transition -> Idle
            event id:get_cmd?switch_off
            action do 
                provide_cmd!switch_off(id)
            end

            // Handle luminence
            transition -> Idle
            event get_lum:get_luminence?luminance
            action do
                provide_cmd!set_temperature(5) // This is a temprary solution
            end

            // Handle Timer
            internal event get_time?time
            action do 
                // Handle getting a time
            end
        }
    }
}