import "datatypes.thingml" from stl
import "pim.thingml"
import "javatimer.thingml"
import "timestuff.thingml"

thing Test includes TemperatureMsg, GeneralMsg, OnOffMsg, LuminanceMsg, TimeStuff {
    required port from_MQTT {
		receives SwitchOn,
			  	 SwitchOff
		sends temperature,
			  luminance
	} 

    required port send_cmd {
		sends SwitchOn, SwitchOff, set_temperature, set_delta, fetch_temp
	}

	provided port get_values {
		receives temperature, prompt
	}

	property prefered_temp: Integer = 23
	property temp_diff: Integer = 2
	property temp_night_diff: Integer = 8
	
	property test_temp:Double	
	
	property lum_on: Integer = 100
	property lum_off: Integer = 5
	
	property isnight:Boolean

    statechart test_behavior init prompt_enter {
		on entry do
			isnight = false
			send_cmd!set_temperature(prefered_temp)
		end

        state prompt_enter {
			transition -> day_and_light_on
			event prompt_value:get_values?prompt
			guard not isnight
			action do
				println("-----------------")
				println("Entering test mode")
				println("-----------------")
				println("Checking Set_temperature for entering thermostat") 
				if (prompt_value.txt == "Now entering thermostat. Please give temperature observations ") do 
					println("Test for Set_temperature for entering thermostat is:" + true)
				end
				else do 
					println("Test for Set_temperature for entering thermostat is " + false)
				end
			end
        }

		state day_and_light_on {
			on entry do
				test_temp = 15 
				from_MQTT!temperature(1, "", test_temp)
				println("-----------------")
				println("Test:  Day and light on")
				println("Setting temperature to " + test_temp)
			end

			transition -> some_time_later_1
			event switch:from_MQTT?SwitchOn
			action do 
				println("Switch on")
			end
		}

		state some_time_later_1 {
			on entry do
				test_temp = 25 
				from_MQTT!temperature(1, "", test_temp)
				println("Setting temperature to " + test_temp)
			end

			transition -> day_and_light_off
			event switch:from_MQTT?SwitchOff
			action do 
				println("Switch off")
			end
		}

		state day_and_light_off {
			on entry do
				test_temp = 15 
				from_MQTT!temperature(1, "", test_temp)
				println("-----------------")
				println("Test:  Day and light off")
				println("Setting temperature to " + test_temp)
				from_MQTT!luminance(1, lum_off)
				println("Setting luminence to " + lum_off)
			end

			transition -> some_time_later_2
			event switch:from_MQTT?SwitchOn
			action do 
				println("Switch on")
			end
		}

		state some_time_later_2 {
			on entry do
				test_temp = 20 
				from_MQTT!temperature(1, "", test_temp)
				println("Setting temperature to " + test_temp)
			end

			transition -> night_start
			event switch:from_MQTT?SwitchOff
			action do 
				println("Switch off")
			end
		}

		state night_start {
			on entry do
				// Set to night
				test_temp = 10
				println("-----------------")
				println("Test:  Night")
				from_MQTT!temperature(1, "", test_temp)
				println("Setting temperature to " + test_temp)
				isnight = true
			end

			transition -> some_time_later_3
			event switch:from_MQTT?SwitchOn
			action do 
				println("Switch on")
			end
		}

		state some_time_later_3 {
			on entry do
				test_temp = 14 
				from_MQTT!temperature(1, "", test_temp)
				println("Setting temperature to " + test_temp)
			end

			transition -> day_start
			event switch:from_MQTT?SwitchOff
			action do 
				println("Switch off")
			end
		}

		state day_start {
			on entry do 
				// Set to day
				isnight = false
				println("-----------------")
				println("Test:  Day")
			end

			transition -> end_test
			event switch:from_MQTT?SwitchOn
			action do 
				println("Switch on")
			end
		}

		state end_test {

		}
    }
}