import "datatypes.thingml" from stl
import "pim_messages.thingml"
import "timestuff.thingml"


thing EnergySaver includes TemperatureMsg, LuminanceMsg, GeneralMsg, TimeStuff{
     
    // Sends
    required port provide_cmd {
        sends set_temperature,
        	add_lightsensor  	 
    }
    
	// Receives
    provided port get_cmd {
        receives temperature,
        		luminance,
        		set_luminance,
        		set_temperature 	
	}
	
    property comfort_temp:Double           // Store comfort temperature
    	
    property lights_off:Double = 2 // Store temperature offset for when lights are off
    property night_temp_delta:Double = 8           // Store temperature offset for when there is night

    property last_lum: Double   // Last recored luminance value
    property lum_threshold: Double   // Threshold for when the room is dart or not
	property lumSens_id:Integer
	
	property isnight:Boolean = Night(Now())	//Check if it's night and no one present
	
    statechart ES_behavior init Build {
        on entry do
            println("Running Energy saver (ES)")
				provide_cmd!add_lightsensor(lumSens_id) // We have only one light sensor in this system
        end
        composite state Build init setup keeps history {
            	
          	state setup {
          		transition -> night
          		guard isnight == true
          		action do
          			println("It is night time now")
          		end
          		transition -> day
          		guard isnight == false
          		action do
          			println("It is day time now")
          		end
          	}
          	
            state present {
            on entry do
            	println("People are present")
            end
            // Get comfort temperature from human
            transition -> present
            event get_temp:get_cmd?temperature
            action do
                comfort_temp = get_temp.t
           	end
           	// Fetch luminance threshold
           	transition -> present
        	event fetch:get_cmd?set_luminance
			action do
				lum_threshold = fetch.lum
			end
            // Check luminance		
			transition -> present
			event get_lum: get_cmd?luminance
			action do
					last_lum = get_lum.lum				
			end
			
			// night time, and no one present
			transition -> night
			guard isnight and (last_lum<=lum_threshold)
			action do
				provide_cmd!set_temperature(comfort_temp - night_temp_delta) // night time and people not present
			end
			
			// day time, and no one present
			transition -> day
			guard not isnight and (last_lum<=lum_threshold)
			action do
				provide_cmd!set_temperature(comfort_temp - night_temp_delta) // day time and people not present
			end
			
        	} // end present
        	
        	state day {
        		
        	transition -> day
            event get_temp:get_cmd?temperature
            action do
                comfort_temp = get_temp.t
           	end
           	// Fetch luminance threshold
           	transition -> day
        	event fetch:get_cmd?set_luminance
			action do
				lum_threshold = fetch.lum
			end
            // Check luminance		
			transition -> day
			event get_lum: get_cmd?luminance
			action do
					last_lum = get_lum.lum				
			end
			
			transition -> day
			guard last_lum<=lum_threshold
			action do
				provide_cmd!set_temperature(comfort_temp - lights_off) //
			end
			
			transition -> present
			guard last_lum>lum_threshold
			action do
				provide_cmd!set_temperature(comfort_temp) //
			end
			
        	} // end day
        	
        state night{
      
         	transition -> night
            event get_temp:get_cmd?temperature
            action do
                comfort_temp = get_temp.t
           	end
           	
           	// Fetch luminance threshold
           	transition -> night
        	event fetch:get_cmd?set_luminance
			action do
				lum_threshold = fetch.lum
			end
            // Check luminance		
			transition -> night
			event get_lum: get_cmd?luminance
			action do
					last_lum = get_lum.lum				
			end
			
			transition -> night
			guard last_lum<=lum_threshold
			action do
					provide_cmd!set_temperature(comfort_temp-night_temp_delta)
			end
			
			// If people present, get set to comfort temperature
			transition -> present
			guard last_lum>lum_threshold
			action do
				provide_cmd!set_temperature(comfort_temp) // if the office is not dark
			end
			
        	} // end night
       }// end Build
    }// End statechart
 } // End thing