/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PIM
 **/
public class PIM extends Component implements IPIM_human_input, IPIM_get_sensor, IPIM_guard_temperature, IPIM_guard_human {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\ttmrature = " + PIM_tmrature_var;
result += "\tthermo_id = " + PIM_thermo_id_var;
result += "\tswitch_id = " + PIM_switch_id_var;
result += "\tdelta = " + PIM_delta_var;
result += "\tlasttemp = " + PIM_lasttemp_var;
result += "";
return result;
}

public synchronized void iamalive1_via_get_sensor(){
final Event _msg = iamalive1Type.instantiate();
_msg.setPort(get_sensor_port);
receive(_msg);
}

public synchronized void iamalive2_via_get_sensor(){
final Event _msg = iamalive2Type.instantiate();
_msg.setPort(get_sensor_port);
receive(_msg);
}

public synchronized void temperature_via_get_sensor(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
final Event _msg = temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
_msg.setPort(get_sensor_port);
receive(_msg);
}

public synchronized void SwitchOn_via_human_input(int OnOffMsg_SwitchOn_did_var){
final Event _msg = SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void SwitchOff_via_human_input(int OnOffMsg_SwitchOff_did_var){
final Event _msg = SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void set_temperature_via_human_input(double TemperatureMsg_set_temperature_t_var){
final Event _msg = set_temperatureType.instantiate(TemperatureMsg_set_temperature_t_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void set_delta_via_human_input(double TemperatureMsg_set_delta_dlta_var){
final Event _msg = set_deltaType.instantiate(TemperatureMsg_set_delta_dlta_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void fetch_temp_via_human_input(){
final Event _msg = fetch_tempType.instantiate();
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void timer_timeout_via_guard_temperature(){
final Event _msg = timer_timeoutType.instantiate();
_msg.setPort(guard_temperature_port);
receive(_msg);
}

public synchronized void timer_timeout_via_guard_human(){
final Event _msg = timer_timeoutType.instantiate();
_msg.setPort(guard_human_port);
receive(_msg);
}

private void sendIamalive1_via_request_sensor(){
request_sensor_port.send(iamalive1Type.instantiate());
}

private void sendIamalive2_via_request_sensor(){
request_sensor_port.send(iamalive2Type.instantiate());
}

private void sendAdd_thermometer_via_request_sensor(int TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
request_sensor_port.send(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var));
}

private void sendAdd_device_via_request_actuator(int DeviceGeneral_add_device_did_var){
request_actuator_port.send(add_deviceType.instantiate(DeviceGeneral_add_device_did_var));
}

private void sendSwitchOn_via_request_actuator(int OnOffMsg_SwitchOn_did_var){
request_actuator_port.send(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var));
}

private void sendSwitchOff_via_request_actuator(int OnOffMsg_SwitchOff_did_var){
request_actuator_port.send(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var));
}

private void sendTemperature_via_human_output(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
human_output_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
}

private void sendPrompt_via_human_output(String GeneralMsg_prompt_txt_var){
human_output_port.send(promptType.instantiate(GeneralMsg_prompt_txt_var));
}

private void sendTimer_start_via_guard_temperature(int TimerMsgs_timer_start_delay_var){
guard_temperature_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_guard_temperature(){
guard_temperature_port.send(timer_cancelType.instantiate());
}

private void sendTimer_start_via_guard_human(int TimerMsgs_timer_start_delay_var){
guard_human_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_guard_human(){
guard_human_port.send(timer_cancelType.instantiate());
}

//Attributes
private int PIM_thermo_id_var;
private double PIM_delta_var;
private double PIM_tmrature_var;
private int PIM_switch_id_var;
private double PIM_lasttemp_var;
//Ports
private Port get_sensor_port;
private Port request_sensor_port;
private Port request_actuator_port;
private Port human_input_port;
private Port human_output_port;
private Port guard_temperature_port;
private Port guard_human_port;
//Message types
protected final Iamalive1MessageType iamalive1Type = new Iamalive1MessageType();
protected final Iamalive2MessageType iamalive2Type = new Iamalive2MessageType();
protected final PromptMessageType promptType = new PromptMessageType();
protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
protected final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
protected final Set_deltaMessageType set_deltaType = new Set_deltaMessageType();
protected final Fetch_tempMessageType fetch_tempType = new Fetch_tempMessageType();
protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
//Empty Constructor
public PIM() {
super();
}

//Getters and Setters for non readonly/final attributes
public int getPIM_thermo_id_var() {
return PIM_thermo_id_var;
}

public void setPIM_thermo_id_var(int PIM_thermo_id_var) {
this.PIM_thermo_id_var = PIM_thermo_id_var;
}

public PIM initPIM_thermo_id_var(int PIM_thermo_id_var) {
this.PIM_thermo_id_var = PIM_thermo_id_var;
return this;
}

public double getPIM_delta_var() {
return PIM_delta_var;
}

public void setPIM_delta_var(double PIM_delta_var) {
this.PIM_delta_var = PIM_delta_var;
}

public PIM initPIM_delta_var(double PIM_delta_var) {
this.PIM_delta_var = PIM_delta_var;
return this;
}

public double getPIM_tmrature_var() {
return PIM_tmrature_var;
}

public void setPIM_tmrature_var(double PIM_tmrature_var) {
this.PIM_tmrature_var = PIM_tmrature_var;
}

public PIM initPIM_tmrature_var(double PIM_tmrature_var) {
this.PIM_tmrature_var = PIM_tmrature_var;
return this;
}

public int getPIM_switch_id_var() {
return PIM_switch_id_var;
}

public void setPIM_switch_id_var(int PIM_switch_id_var) {
this.PIM_switch_id_var = PIM_switch_id_var;
}

public PIM initPIM_switch_id_var(int PIM_switch_id_var) {
this.PIM_switch_id_var = PIM_switch_id_var;
return this;
}

public double getPIM_lasttemp_var() {
return PIM_lasttemp_var;
}

public void setPIM_lasttemp_var(double PIM_lasttemp_var) {
this.PIM_lasttemp_var = PIM_lasttemp_var;
}

public PIM initPIM_lasttemp_var(double PIM_lasttemp_var) {
this.PIM_lasttemp_var = PIM_lasttemp_var;
return this;
}

//Getters for Ports
public Port getGet_sensor_port() {
return get_sensor_port;
}
public Port getRequest_sensor_port() {
return request_sensor_port;
}
public Port getRequest_actuator_port() {
return request_actuator_port;
}
public Port getHuman_input_port() {
return human_input_port;
}
public Port getHuman_output_port() {
return human_output_port;
}
public Port getGuard_temperature_port() {
return guard_temperature_port;
}
public Port getGuard_human_port() {
return guard_human_port;
}
private CompositeState buildPIM_PIM_behavior(){
final CompositeState state_PIM_PIM_behavior_Build = buildPIM_PIM_behavior_Build();
final CompositeState state_PIM_PIM_behavior_Running = buildPIM_PIM_behavior_Running();
Handler h652547571 = new Handler();
h652547571.from(state_PIM_PIM_behavior_Build);
h652547571.event(set_deltaType);
h652547571.port(human_input_port);
h652547571.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Handler h1350163491 = new Handler();
h1350163491.from(state_PIM_PIM_behavior_Build);
h1350163491.event(fetch_tempType);
h1350163491.port(human_input_port);
h1350163491.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_lasttemp_var()));
});

Handler h1856634579 = new Handler();
h1856634579.from(state_PIM_PIM_behavior_Build);
h1856634579.event(temperatureType);
h1856634579.port(get_sensor_port);
h1856634579.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_lasttemp_var = (double) (temperature.t);
});

Handler h1612280422 = new Handler();
h1612280422.from(state_PIM_PIM_behavior_Build);
h1612280422.event(iamalive1Type);
h1612280422.port(get_sensor_port);
h1612280422.action((Event e)->{
sendPrompt_via_human_output((String) ("INTERNAL ERROR: iamalive1 is covered inside Build"));
});

Handler h729703956 = new Handler();
h729703956.from(state_PIM_PIM_behavior_Build);
h729703956.event(iamalive2Type);
h729703956.port(get_sensor_port);
h729703956.action((Event e)->{
sendPrompt_via_human_output((String) ("INTERNAL ERROR: iamalive2 is covered inside Build"));
});

Transition h54940735 = new Transition();
h54940735.from(state_PIM_PIM_behavior_Build).to(state_PIM_PIM_behavior_Running);
h54940735.event(set_temperatureType);
h54940735.port(human_input_port);
h54940735.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
sendPrompt_via_human_output((String) ("Now entering thermostat. Please give temperature observations"));
});

Transition h2024164251 = new Transition();
h2024164251.from(state_PIM_PIM_behavior_Build).to(state_PIM_PIM_behavior_Build);
h2024164251.event(timer_timeoutType);
h2024164251.port(guard_human_port);
h2024164251.action((Event e)->{
sendPrompt_via_human_output((String) ("Please continue doing the build of the temperature control"));
});

Handler h2027996610 = new Handler();
h2027996610.from(state_PIM_PIM_behavior_Running);
h2027996610.event(set_deltaType);
h2027996610.port(human_input_port);
h2027996610.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Handler h11758286 = new Handler();
h11758286.from(state_PIM_PIM_behavior_Running);
h11758286.event(fetch_tempType);
h11758286.port(human_input_port);
h11758286.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_lasttemp_var()));
});

Handler h1795976630 = new Handler();
h1795976630.from(state_PIM_PIM_behavior_Running);
h1795976630.event(iamalive1Type);
h1795976630.port(get_sensor_port);
h1795976630.action((Event e)->{
sendPrompt_via_human_output((String) ("INTERNAL ERROR: iamalive1 received at PIM.Running"));
});

Handler h2027262208 = new Handler();
h2027262208.from(state_PIM_PIM_behavior_Running);
h2027262208.event(iamalive2Type);
h2027262208.port(get_sensor_port);
h2027262208.action((Event e)->{
sendPrompt_via_human_output((String) ("INTERNAL ERROR: iamalive2 received at PIM.Running"));
});

Transition h831824766 = new Transition();
h831824766.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h831824766.event(SwitchOnType);
h831824766.port(human_input_port);
h831824766.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible SwitchOn at PIM.Running"));
});

Transition h992426964 = new Transition();
h992426964.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h992426964.event(SwitchOffType);
h992426964.port(human_input_port);
h992426964.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible SwitchOff at PIM.Running"));
});

Transition h382323237 = new Transition();
h382323237.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h382323237.event(set_temperatureType);
h382323237.port(human_input_port);
h382323237.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible set_temperature at PIM.Running"));
});

Transition h303608646 = new Transition();
h303608646.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h303608646.event(temperatureType);
h303608646.port(get_sensor_port);
h303608646.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: temperature received at PIM.Running"));
PIM_lasttemp_var = (double) (temperature.t);
});

final CompositeState state_PIM_PIM_behavior = new CompositeState("PIM_behavior");
state_PIM_PIM_behavior.onEntry(()->{
System.out.print(""+(("Running The Room X3D.MQTT.sim\n")));
});
state_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Build);
state_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Running);
state_PIM_PIM_behavior.initial(state_PIM_PIM_behavior_Build);
return state_PIM_PIM_behavior;
}

private CompositeState buildPIM_PIM_behavior_Build(){
final AtomicState state_PIM_PIM_behavior_Build_Alive1 = new AtomicState("Alive1");
state_PIM_PIM_behavior_Build_Alive1.onEntry(()->{
sendIamalive1_via_request_sensor();
});
final AtomicState state_PIM_PIM_behavior_Build_Alive2 = new AtomicState("Alive2");
final AtomicState state_PIM_PIM_behavior_Build_SetThermostat = new AtomicState("SetThermostat");
state_PIM_PIM_behavior_Build_SetThermostat.onEntry(()->{
sendAdd_thermometer_via_request_sensor((int) (getPIM_thermo_id_var()), (String) ("t"));
sendAdd_device_via_request_actuator((int) (getPIM_switch_id_var()));
});
Transition h17776332 = new Transition();
h17776332.from(state_PIM_PIM_behavior_Build_Alive1).to(state_PIM_PIM_behavior_Build_Alive2);
h17776332.event(iamalive1Type);
h17776332.port(get_sensor_port);
h17776332.action((Event e)->{
sendIamalive2_via_request_sensor();
});

Transition h1911690713 = new Transition();
h1911690713.from(state_PIM_PIM_behavior_Build_Alive1).to(state_PIM_PIM_behavior_Build_SetThermostat);
h1911690713.event(iamalive2Type);
h1911690713.port(get_sensor_port);
h1911690713.action((Event e)->{
sendIamalive2_via_request_sensor();
});

Transition h179718463 = new Transition();
h179718463.from(state_PIM_PIM_behavior_Build_Alive2).to(state_PIM_PIM_behavior_Build_SetThermostat);
h179718463.event(iamalive2Type);
h179718463.port(get_sensor_port);
Transition h900041142 = new Transition();
h900041142.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h900041142.event(SwitchOnType);
h900041142.port(human_input_port);
h900041142.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

Transition h1164474699 = new Transition();
h1164474699.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h1164474699.event(SwitchOffType);
h1164474699.port(human_input_port);
h1164474699.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

final CompositeState state_PIM_PIM_behavior_Build = new CompositeState("Build");
state_PIM_PIM_behavior_Build.onEntry(()->{
sendTimer_start_via_guard_human((int) (30000));
});
state_PIM_PIM_behavior_Build.onExit(()->{
sendTimer_cancel_via_guard_human();
});

state_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_Alive1);
state_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_Alive2);
state_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_SetThermostat);
state_PIM_PIM_behavior_Build.keepHistory(true);
state_PIM_PIM_behavior_Build.initial(state_PIM_PIM_behavior_Build_Alive1);
return state_PIM_PIM_behavior_Build;
}

private CompositeState buildPIM_PIM_behavior_Running(){
final CompositeState state_PIM_PIM_behavior_Running_Thermostat = buildPIM_PIM_behavior_Running_Thermostat();
final AtomicState state_PIM_PIM_behavior_Running_On = new AtomicState("On");
final AtomicState state_PIM_PIM_behavior_Running_Off = new AtomicState("Off");
Transition h87364340 = new Transition();
h87364340.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_On);
h87364340.event(SwitchOnType);
h87364340.port(human_input_port);
h87364340.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h1570408082 = new Transition();
h1570408082.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_Off);
h1570408082.event(SwitchOffType);
h1570408082.port(human_input_port);
h1570408082.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h1651433654 = new Transition();
h1651433654.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_Thermostat);
h1651433654.event(set_temperatureType);
h1651433654.port(human_input_port);
h1651433654.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
});

Transition h9441169 = new Transition();
h9441169.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_Off);
h9441169.event(SwitchOffType);
h9441169.port(human_input_port);
h9441169.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h969514999 = new Transition();
h969514999.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_On);
h969514999.event(SwitchOnType);
h969514999.port(human_input_port);
h969514999.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h384470769 = new Transition();
h384470769.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_Thermostat);
h384470769.event(set_temperatureType);
h384470769.port(human_input_port);
h384470769.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
});

Transition h1570017647 = new Transition();
h1570017647.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_On);
h1570017647.event(temperatureType);
h1570017647.port(get_sensor_port);
h1570017647.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_lasttemp_var() > temperature.t) {
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));

}
PIM_lasttemp_var = (double) (temperature.t);
});

Transition h1851450556 = new Transition();
h1851450556.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Off);
h1851450556.event(SwitchOffType);
h1851450556.port(human_input_port);
h1851450556.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h1145407613 = new Transition();
h1145407613.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_On);
h1145407613.event(SwitchOnType);
h1145407613.port(human_input_port);
h1145407613.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h1855975180 = new Transition();
h1855975180.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Thermostat);
h1855975180.event(set_temperatureType);
h1855975180.port(human_input_port);
h1855975180.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
});

Transition h835530321 = new Transition();
h835530321.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Off);
h835530321.event(temperatureType);
h835530321.port(get_sensor_port);
h835530321.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_lasttemp_var() < temperature.t) {
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));

}
PIM_lasttemp_var = (double) (temperature.t);
});

final CompositeState state_PIM_PIM_behavior_Running = new CompositeState("Running");
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_Thermostat);
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_On);
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_Off);
state_PIM_PIM_behavior_Running.keepHistory(true);
state_PIM_PIM_behavior_Running.initial(state_PIM_PIM_behavior_Running_Thermostat);
return state_PIM_PIM_behavior_Running;
}

private CompositeState buildPIM_PIM_behavior_Running_Thermostat(){
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprDecide = new AtomicState("TemprDecide");
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease = new AtomicState("TemprIncrease");
state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease.onEntry(()->{
sendTimer_start_via_guard_temperature((int) (65000));
});
state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease.onExit(()->{
sendTimer_cancel_via_guard_temperature();
});

final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease = new AtomicState("TemprDecrease");
state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease.onEntry(()->{
sendTimer_start_via_guard_temperature((int) (65000));
});
state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease.onExit(()->{
sendTimer_cancel_via_guard_temperature();
});

Transition h1508927111 = new Transition();
h1508927111.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h1508927111.guard((Event e)->{
return getPIM_lasttemp_var() >= getPIM_tmrature_var() - getPIM_delta_var();
});

h1508927111.action((Event e)->{
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));
});

Transition h180567030 = new Transition();
h180567030.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h180567030.guard((Event e)->{
return getPIM_lasttemp_var() < getPIM_tmrature_var() - getPIM_delta_var();
});

h180567030.action((Event e)->{
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));
});

Transition h301342420 = new Transition();
h301342420.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h301342420.event(temperatureType);
h301342420.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t <= getPIM_tmrature_var() + getPIM_delta_var();
});

h301342420.port(get_sensor_port);
h301342420.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_lasttemp_var() > temperature.t) {
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));

}
PIM_lasttemp_var = (double) (temperature.t);
});

Transition h20604670 = new Transition();
h20604670.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h20604670.event(temperatureType);
h20604670.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t > getPIM_tmrature_var() + getPIM_delta_var();
});

h20604670.port(get_sensor_port);
h20604670.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));
PIM_lasttemp_var = (double) (temperature.t);
});

Transition h710611559 = new Transition();
h710611559.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h710611559.event(timer_timeoutType);
h710611559.port(guard_temperature_port);
h710611559.action((Event e)->{
sendPrompt_via_human_output((String) ("WARNING: @TemprIncrease - temperature measurement is delayed"));
});

Transition h2122079674 = new Transition();
h2122079674.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h2122079674.event(set_deltaType);
h2122079674.port(human_input_port);
h2122079674.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Transition h1171958575 = new Transition();
h1171958575.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1171958575.event(fetch_tempType);
h1171958575.port(human_input_port);
h1171958575.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_lasttemp_var()));
});

Transition h1450419113 = new Transition();
h1450419113.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h1450419113.event(temperatureType);
h1450419113.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t >= getPIM_tmrature_var() - getPIM_delta_var();
});

h1450419113.port(get_sensor_port);
h1450419113.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_lasttemp_var() < temperature.t) {
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));

}
PIM_lasttemp_var = (double) (temperature.t);
});

Transition h1344045862 = new Transition();
h1344045862.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1344045862.event(temperatureType);
h1344045862.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t < getPIM_tmrature_var() - getPIM_delta_var();
});

h1344045862.port(get_sensor_port);
h1344045862.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));
PIM_lasttemp_var = (double) (temperature.t);
});

Transition h1929939667 = new Transition();
h1929939667.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h1929939667.event(timer_timeoutType);
h1929939667.port(guard_temperature_port);
h1929939667.action((Event e)->{
sendPrompt_via_human_output((String) ("WARNING: @TemprDecrease - temperature measurement is delayed"));
});

Transition h38440907 = new Transition();
h38440907.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h38440907.event(set_deltaType);
h38440907.port(human_input_port);
h38440907.action((Event e)->{
final Set_deltaMessageType.Set_deltaMessage set_delta = (Set_deltaMessageType.Set_deltaMessage) e;
PIM_delta_var = (double) (set_delta.dlta);
});

Transition h1561835738 = new Transition();
h1561835738.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1561835738.event(fetch_tempType);
h1561835738.port(human_input_port);
h1561835738.action((Event e)->{
sendTemperature_via_human_output((int) (getPIM_thermo_id_var()), (String) ("temperature "), (double) (getPIM_lasttemp_var()));
});

final CompositeState state_PIM_PIM_behavior_Running_Thermostat = new CompositeState("Thermostat");
state_PIM_PIM_behavior_Running_Thermostat.onEntry(()->{
});
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide);
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
state_PIM_PIM_behavior_Running_Thermostat.initial(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide);
return state_PIM_PIM_behavior_Running_Thermostat;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
get_sensor_port = new Port("get_sensor", this);
request_sensor_port = new Port("request_sensor", this);
request_actuator_port = new Port("request_actuator", this);
human_input_port = new Port("human_input", this);
human_output_port = new Port("human_output", this);
guard_temperature_port = new Port("guard_temperature", this);
guard_human_port = new Port("guard_human", this);
} else {
get_sensor_port = ((PIM)root).get_sensor_port;
request_sensor_port = ((PIM)root).request_sensor_port;
request_actuator_port = ((PIM)root).request_actuator_port;
human_input_port = ((PIM)root).human_input_port;
human_output_port = ((PIM)root).human_output_port;
guard_temperature_port = ((PIM)root).guard_temperature_port;
guard_human_port = ((PIM)root).guard_human_port;
}
if (session == null){
//Init state machine
behavior = buildPIM_PIM_behavior();
}
return this;
}

}
