/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : MQTTDriver
 **/
public class MQTTDriver extends Component implements IMQTTDriver_require_val, IMQTTDriver_MQTT {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tthermometers = " + MQTTDriver_thermometers_var;
result += "\tthermotext = " + MQTTDriver_thermotext_var;
result += "\tthermoval = " + MQTTDriver_thermoval_var;
result += "\tlightsensors = " + MQTTDriver_lightsensors_var;
result += "\tlightval = " + MQTTDriver_lightval_var;
result += "\tlumval = " + MQTTDriver_lumval_var;
result += "\tmotionsensors = " + MQTTDriver_motionsensors_var;
result += "\tlast_mo = " + MQTTDriver_last_mo_var;
result += "\tlast_light = " + MQTTDriver_last_light_var;
result += "\tlast_thermo = " + MQTTDriver_last_thermo_var;
result += "\tlast_lum = " + MQTTDriver_last_lum_var;
result += "\tfoundL = " + MQTTDriver_foundL_var;
result += "\ti = " + MQTTDriver_i_var;
result += "\tid_s = " + MQTTDriver_id_s_var;
result += "\tfound = " + MQTTDriver_found_var;
result += "\tonoffswitches = " + MQTTDriver_onoffswitches_var;
result += "\tlast_onoff = " + MQTTDriver_last_onoff_var;
result += "\tdid = " + MQTTDriver_did_var;
result += "";
return result;
}

public synchronized void add_thermometer_via_require_val(int TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
final Event _msg = add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var);
_msg.setPort(require_val_port);
receive(_msg);
}

public synchronized void add_device_via_require_val(int DeviceGeneral_add_device_did_var){
final Event _msg = add_deviceType.instantiate(DeviceGeneral_add_device_did_var);
_msg.setPort(require_val_port);
receive(_msg);
}

public synchronized void add_lightsensor_via_require_val(int LuminanceMsg_add_lightsensor_id_var){
final Event _msg = add_lightsensorType.instantiate(LuminanceMsg_add_lightsensor_id_var);
_msg.setPort(require_val_port);
receive(_msg);
}

public synchronized void SwitchOn_via_require_val(int OnOffMsg_SwitchOn_did_var){
final Event _msg = SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var);
_msg.setPort(require_val_port);
receive(_msg);
}

public synchronized void SwitchOff_via_require_val(int OnOffMsg_SwitchOff_did_var){
final Event _msg = SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var);
_msg.setPort(require_val_port);
receive(_msg);
}

public synchronized void iamalive1_via_require_val(){
final Event _msg = iamalive1Type.instantiate();
_msg.setPort(require_val_port);
receive(_msg);
}

public synchronized void iamalive2_via_require_val(){
final Event _msg = iamalive2Type.instantiate();
_msg.setPort(require_val_port);
receive(_msg);
}

public synchronized void temperature_via_MQTT(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
final Event _msg = temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
_msg.setPort(MQTT_port);
receive(_msg);
}

public synchronized void luminance_via_MQTT(int LuminanceMsg_luminance_id_var, double LuminanceMsg_luminance_lum_var){
final Event _msg = luminanceType.instantiate(LuminanceMsg_luminance_id_var, LuminanceMsg_luminance_lum_var);
_msg.setPort(MQTT_port);
receive(_msg);
}

private void sendTemperature_via_provide_temp(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
provide_temp_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
}

private void sendLuminance_via_provide_lum_motion(int LuminanceMsg_luminance_id_var, double LuminanceMsg_luminance_lum_var){
provide_lum_motion_port.send(luminanceType.instantiate(LuminanceMsg_luminance_id_var, LuminanceMsg_luminance_lum_var));
}

private void sendSwitchOn_via_MQTT(int OnOffMsg_SwitchOn_did_var){
MQTT_port.send(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var));
}

private void sendSwitchOff_via_MQTT(int OnOffMsg_SwitchOff_did_var){
MQTT_port.send(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var));
}

//Attributes
private double[] MQTTDriver_thermoval_var;
private int[] MQTTDriver_onoffswitches_var;
private int MQTTDriver_id_s_var;
private int[] MQTTDriver_thermometers_var;
private int[] MQTTDriver_lightsensors_var;
private int MQTTDriver_last_onoff_var;
private String[] MQTTDriver_thermotext_var;
private int MQTTDriver_last_thermo_var;
private int MQTTDriver_last_lum_var;
private int MQTTDriver_i_var;
private double[] MQTTDriver_lumval_var;
private int[] MQTTDriver_motionsensors_var;
private int MQTTDriver_last_mo_var;
private boolean MQTTDriver_foundL_var;
private int MQTTDriver_last_light_var;
private double[] MQTTDriver_lightval_var;
private boolean MQTTDriver_found_var;
private int MQTTDriver_did_var;
//Ports
private Port require_val_port;
private Port provide_temp_port;
private Port provide_lum_motion_port;
private Port MQTT_port;
//Message types
protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
protected final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
protected final Set_deltaMessageType set_deltaType = new Set_deltaMessageType();
protected final Fetch_tempMessageType fetch_tempType = new Fetch_tempMessageType();
protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
protected final Iamalive1MessageType iamalive1Type = new Iamalive1MessageType();
protected final Iamalive2MessageType iamalive2Type = new Iamalive2MessageType();
protected final PromptMessageType promptType = new PromptMessageType();
protected final LuminanceMessageType luminanceType = new LuminanceMessageType();
protected final Add_lightsensorMessageType add_lightsensorType = new Add_lightsensorMessageType();
protected final Set_luminanceMessageType set_luminanceType = new Set_luminanceMessageType();
protected final Lum_thresholdMessageType lum_thresholdType = new Lum_thresholdMessageType();
//Empty Constructor
public MQTTDriver() {
super();
}

//Getters and Setters for non readonly/final attributes
public double[] getMQTTDriver_thermoval_var() {
return MQTTDriver_thermoval_var;
}

public void setMQTTDriver_thermoval_var(double[] MQTTDriver_thermoval_var) {
this.MQTTDriver_thermoval_var = MQTTDriver_thermoval_var;
}

public MQTTDriver initMQTTDriver_thermoval_var(double[] MQTTDriver_thermoval_var) {
this.MQTTDriver_thermoval_var = MQTTDriver_thermoval_var;
return this;
}

public int[] getMQTTDriver_onoffswitches_var() {
return MQTTDriver_onoffswitches_var;
}

public void setMQTTDriver_onoffswitches_var(int[] MQTTDriver_onoffswitches_var) {
this.MQTTDriver_onoffswitches_var = MQTTDriver_onoffswitches_var;
}

public MQTTDriver initMQTTDriver_onoffswitches_var(int[] MQTTDriver_onoffswitches_var) {
this.MQTTDriver_onoffswitches_var = MQTTDriver_onoffswitches_var;
return this;
}

public int getMQTTDriver_id_s_var() {
return MQTTDriver_id_s_var;
}

public void setMQTTDriver_id_s_var(int MQTTDriver_id_s_var) {
this.MQTTDriver_id_s_var = MQTTDriver_id_s_var;
}

public MQTTDriver initMQTTDriver_id_s_var(int MQTTDriver_id_s_var) {
this.MQTTDriver_id_s_var = MQTTDriver_id_s_var;
return this;
}

public int[] getMQTTDriver_thermometers_var() {
return MQTTDriver_thermometers_var;
}

public void setMQTTDriver_thermometers_var(int[] MQTTDriver_thermometers_var) {
this.MQTTDriver_thermometers_var = MQTTDriver_thermometers_var;
}

public MQTTDriver initMQTTDriver_thermometers_var(int[] MQTTDriver_thermometers_var) {
this.MQTTDriver_thermometers_var = MQTTDriver_thermometers_var;
return this;
}

public int[] getMQTTDriver_lightsensors_var() {
return MQTTDriver_lightsensors_var;
}

public void setMQTTDriver_lightsensors_var(int[] MQTTDriver_lightsensors_var) {
this.MQTTDriver_lightsensors_var = MQTTDriver_lightsensors_var;
}

public MQTTDriver initMQTTDriver_lightsensors_var(int[] MQTTDriver_lightsensors_var) {
this.MQTTDriver_lightsensors_var = MQTTDriver_lightsensors_var;
return this;
}

public int getMQTTDriver_last_onoff_var() {
return MQTTDriver_last_onoff_var;
}

public void setMQTTDriver_last_onoff_var(int MQTTDriver_last_onoff_var) {
this.MQTTDriver_last_onoff_var = MQTTDriver_last_onoff_var;
}

public MQTTDriver initMQTTDriver_last_onoff_var(int MQTTDriver_last_onoff_var) {
this.MQTTDriver_last_onoff_var = MQTTDriver_last_onoff_var;
return this;
}

public String[] getMQTTDriver_thermotext_var() {
return MQTTDriver_thermotext_var;
}

public void setMQTTDriver_thermotext_var(String[] MQTTDriver_thermotext_var) {
this.MQTTDriver_thermotext_var = MQTTDriver_thermotext_var;
}

public MQTTDriver initMQTTDriver_thermotext_var(String[] MQTTDriver_thermotext_var) {
this.MQTTDriver_thermotext_var = MQTTDriver_thermotext_var;
return this;
}

public int getMQTTDriver_last_thermo_var() {
return MQTTDriver_last_thermo_var;
}

public void setMQTTDriver_last_thermo_var(int MQTTDriver_last_thermo_var) {
this.MQTTDriver_last_thermo_var = MQTTDriver_last_thermo_var;
}

public MQTTDriver initMQTTDriver_last_thermo_var(int MQTTDriver_last_thermo_var) {
this.MQTTDriver_last_thermo_var = MQTTDriver_last_thermo_var;
return this;
}

public int getMQTTDriver_last_lum_var() {
return MQTTDriver_last_lum_var;
}

public void setMQTTDriver_last_lum_var(int MQTTDriver_last_lum_var) {
this.MQTTDriver_last_lum_var = MQTTDriver_last_lum_var;
}

public MQTTDriver initMQTTDriver_last_lum_var(int MQTTDriver_last_lum_var) {
this.MQTTDriver_last_lum_var = MQTTDriver_last_lum_var;
return this;
}

public int getMQTTDriver_i_var() {
return MQTTDriver_i_var;
}

public void setMQTTDriver_i_var(int MQTTDriver_i_var) {
this.MQTTDriver_i_var = MQTTDriver_i_var;
}

public MQTTDriver initMQTTDriver_i_var(int MQTTDriver_i_var) {
this.MQTTDriver_i_var = MQTTDriver_i_var;
return this;
}

public double[] getMQTTDriver_lumval_var() {
return MQTTDriver_lumval_var;
}

public void setMQTTDriver_lumval_var(double[] MQTTDriver_lumval_var) {
this.MQTTDriver_lumval_var = MQTTDriver_lumval_var;
}

public MQTTDriver initMQTTDriver_lumval_var(double[] MQTTDriver_lumval_var) {
this.MQTTDriver_lumval_var = MQTTDriver_lumval_var;
return this;
}

public int[] getMQTTDriver_motionsensors_var() {
return MQTTDriver_motionsensors_var;
}

public void setMQTTDriver_motionsensors_var(int[] MQTTDriver_motionsensors_var) {
this.MQTTDriver_motionsensors_var = MQTTDriver_motionsensors_var;
}

public MQTTDriver initMQTTDriver_motionsensors_var(int[] MQTTDriver_motionsensors_var) {
this.MQTTDriver_motionsensors_var = MQTTDriver_motionsensors_var;
return this;
}

public int getMQTTDriver_last_mo_var() {
return MQTTDriver_last_mo_var;
}

public void setMQTTDriver_last_mo_var(int MQTTDriver_last_mo_var) {
this.MQTTDriver_last_mo_var = MQTTDriver_last_mo_var;
}

public MQTTDriver initMQTTDriver_last_mo_var(int MQTTDriver_last_mo_var) {
this.MQTTDriver_last_mo_var = MQTTDriver_last_mo_var;
return this;
}

public boolean getMQTTDriver_foundL_var() {
return MQTTDriver_foundL_var;
}

public void setMQTTDriver_foundL_var(boolean MQTTDriver_foundL_var) {
this.MQTTDriver_foundL_var = MQTTDriver_foundL_var;
}

public MQTTDriver initMQTTDriver_foundL_var(boolean MQTTDriver_foundL_var) {
this.MQTTDriver_foundL_var = MQTTDriver_foundL_var;
return this;
}

public int getMQTTDriver_last_light_var() {
return MQTTDriver_last_light_var;
}

public void setMQTTDriver_last_light_var(int MQTTDriver_last_light_var) {
this.MQTTDriver_last_light_var = MQTTDriver_last_light_var;
}

public MQTTDriver initMQTTDriver_last_light_var(int MQTTDriver_last_light_var) {
this.MQTTDriver_last_light_var = MQTTDriver_last_light_var;
return this;
}

public double[] getMQTTDriver_lightval_var() {
return MQTTDriver_lightval_var;
}

public void setMQTTDriver_lightval_var(double[] MQTTDriver_lightval_var) {
this.MQTTDriver_lightval_var = MQTTDriver_lightval_var;
}

public MQTTDriver initMQTTDriver_lightval_var(double[] MQTTDriver_lightval_var) {
this.MQTTDriver_lightval_var = MQTTDriver_lightval_var;
return this;
}

public boolean getMQTTDriver_found_var() {
return MQTTDriver_found_var;
}

public void setMQTTDriver_found_var(boolean MQTTDriver_found_var) {
this.MQTTDriver_found_var = MQTTDriver_found_var;
}

public MQTTDriver initMQTTDriver_found_var(boolean MQTTDriver_found_var) {
this.MQTTDriver_found_var = MQTTDriver_found_var;
return this;
}

public int getMQTTDriver_did_var() {
return MQTTDriver_did_var;
}

public void setMQTTDriver_did_var(int MQTTDriver_did_var) {
this.MQTTDriver_did_var = MQTTDriver_did_var;
}

public MQTTDriver initMQTTDriver_did_var(int MQTTDriver_did_var) {
this.MQTTDriver_did_var = MQTTDriver_did_var;
return this;
}

//Getters for Ports
public Port getRequire_val_port() {
return require_val_port;
}
public Port getProvide_temp_port() {
return provide_temp_port;
}
public Port getProvide_lum_motion_port() {
return provide_lum_motion_port;
}
public Port getMQTT_port() {
return MQTT_port;
}
private CompositeState buildMQTTDriver_behaviorMQTTDriver(){
final AtomicState state_MQTTDriver_behaviorMQTTDriver_Idle = new AtomicState("Idle");
Transition h455576969 = new Transition();
h455576969.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h455576969.event(temperatureType);
h455576969.port(MQTT_port);
h455576969.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
MQTTDriver_id_s_var = (int) (temperature.id);
MQTTDriver_i_var = (int) (0);
MQTTDriver_found_var = (boolean) (false);
while(getMQTTDriver_i_var() < getMQTTDriver_last_thermo_var() && ( !(getMQTTDriver_found_var()))) {
if(getMQTTDriver_id_s_var() == MQTTDriver_thermometers_var[(int)(getMQTTDriver_i_var())]) {
MQTTDriver_found_var = (boolean) (true);

}
MQTTDriver_i_var = (int) (getMQTTDriver_i_var() + 1);

}
if(getMQTTDriver_found_var()) {
MQTTDriver_thermoval_var[(int)(getMQTTDriver_i_var() - 1)] = (double) (temperature.t);
sendTemperature_via_provide_temp((int) (getMQTTDriver_id_s_var()), (String) (MQTTDriver_thermotext_var[(int)(getMQTTDriver_i_var())]), (double) (temperature.t));

}
});

Transition h713294501 = new Transition();
h713294501.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h713294501.event(luminanceType);
h713294501.port(MQTT_port);
h713294501.action((Event e)->{
final LuminanceMessageType.LuminanceMessage luminance = (LuminanceMessageType.LuminanceMessage) e;
MQTTDriver_id_s_var = (int) (luminance.id);
MQTTDriver_i_var = (int) (0);
MQTTDriver_found_var = (boolean) (false);
while(getMQTTDriver_i_var() < getMQTTDriver_last_lum_var() && ( !(getMQTTDriver_found_var()))) {
if(getMQTTDriver_id_s_var() == MQTTDriver_lightsensors_var[(int)(getMQTTDriver_i_var())]) {
MQTTDriver_found_var = (boolean) (true);

}

}
if(getMQTTDriver_found_var()) {
MQTTDriver_lumval_var[(int)(getMQTTDriver_i_var() - 1)] = (double) (luminance.lum);
sendLuminance_via_provide_lum_motion((int) (getMQTTDriver_id_s_var()), (double) (luminance.lum));

}
});

Transition h145199460 = new Transition();
h145199460.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h145199460.event(add_thermometerType);
h145199460.port(require_val_port);
h145199460.action((Event e)->{
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
MQTTDriver_id_s_var = (int) (add_thermometer.id);
MQTTDriver_thermometers_var[(int)(getMQTTDriver_last_thermo_var())] = (int) (getMQTTDriver_id_s_var());
MQTTDriver_thermotext_var[(int)(getMQTTDriver_last_thermo_var())] = (String) (add_thermometer.txt);
MQTTDriver_thermoval_var[(int)(getMQTTDriver_last_thermo_var())] = (double) (20);
MQTTDriver_last_thermo_var = (int) (getMQTTDriver_last_thermo_var() + 1);
});

Transition h1781048466 = new Transition();
h1781048466.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h1781048466.event(add_deviceType);
h1781048466.port(require_val_port);
h1781048466.action((Event e)->{
final Add_deviceMessageType.Add_deviceMessage add_device = (Add_deviceMessageType.Add_deviceMessage) e;
MQTTDriver_did_var = (int) (add_device.did);
MQTTDriver_onoffswitches_var[(int)(getMQTTDriver_last_onoff_var())] = (int) (getMQTTDriver_did_var());
MQTTDriver_last_onoff_var = (int) (getMQTTDriver_last_onoff_var() + 1);
});

Transition h680034286 = new Transition();
h680034286.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h680034286.event(SwitchOnType);
h680034286.port(require_val_port);
h680034286.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
MQTTDriver_did_var = (int) (SwitchOn.did);
MQTTDriver_i_var = (int) (0);
MQTTDriver_found_var = (boolean) (false);
while(getMQTTDriver_i_var() < getMQTTDriver_last_onoff_var() && ( !(getMQTTDriver_found_var()))) {
if(getMQTTDriver_did_var() == MQTTDriver_onoffswitches_var[(int)(getMQTTDriver_i_var())]) {
MQTTDriver_found_var = (boolean) (true);

}
MQTTDriver_i_var = (int) (getMQTTDriver_i_var() + 1);

}
if(getMQTTDriver_found_var()) {
sendSwitchOn_via_MQTT((int) (getMQTTDriver_did_var()));

}
});

Transition h1974301887 = new Transition();
h1974301887.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h1974301887.event(SwitchOffType);
h1974301887.port(require_val_port);
h1974301887.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
MQTTDriver_did_var = (int) (SwitchOff.did);
MQTTDriver_i_var = (int) (0);
MQTTDriver_found_var = (boolean) (false);
while(getMQTTDriver_i_var() < getMQTTDriver_last_onoff_var() && ( !(getMQTTDriver_found_var()))) {
if(getMQTTDriver_did_var() == MQTTDriver_onoffswitches_var[(int)(getMQTTDriver_i_var())]) {
MQTTDriver_found_var = (boolean) (true);

}
MQTTDriver_i_var = (int) (getMQTTDriver_i_var() + 1);

}
if(getMQTTDriver_found_var()) {
sendSwitchOff_via_MQTT((int) (getMQTTDriver_did_var()));

}
});

Transition h1614634288 = new Transition();
h1614634288.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h1614634288.event(add_lightsensorType);
h1614634288.port(require_val_port);
h1614634288.action((Event e)->{
final Add_lightsensorMessageType.Add_lightsensorMessage add_lightsensor = (Add_lightsensorMessageType.Add_lightsensorMessage) e;
MQTTDriver_id_s_var = (int) (add_lightsensor.id);
MQTTDriver_lightsensors_var[(int)(getMQTTDriver_last_light_var())] = (int) (getMQTTDriver_id_s_var());
MQTTDriver_lightval_var[(int)(getMQTTDriver_last_light_var())] = (double) (50);
MQTTDriver_last_light_var = (int) (getMQTTDriver_last_light_var() + 1);
});

Transition h1491433449 = new Transition();
h1491433449.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h1491433449.event(luminanceType);
h1491433449.port(MQTT_port);
h1491433449.action((Event e)->{
final LuminanceMessageType.LuminanceMessage luminance = (LuminanceMessageType.LuminanceMessage) e;
MQTTDriver_id_s_var = (int) (luminance.id);
MQTTDriver_i_var = (int) (0);
MQTTDriver_foundL_var = (boolean) (false);
while(getMQTTDriver_i_var() > getMQTTDriver_last_light_var() && ( !(getMQTTDriver_foundL_var()))) {
if(getMQTTDriver_id_s_var() == MQTTDriver_lightsensors_var[(int)(getMQTTDriver_i_var())]) {
MQTTDriver_foundL_var = (boolean) (true);

}
MQTTDriver_i_var = (int) (getMQTTDriver_i_var() + 1);

}
if(getMQTTDriver_foundL_var()) {
MQTTDriver_lightval_var[(int)(getMQTTDriver_i_var() - 1)] = (double) (luminance.lum);
sendLuminance_via_provide_lum_motion((int) (getMQTTDriver_id_s_var()), (double) (luminance.lum));

}
});

final CompositeState state_MQTTDriver_behaviorMQTTDriver = new CompositeState("behaviorMQTTDriver");
state_MQTTDriver_behaviorMQTTDriver.onEntry(()->{
});
state_MQTTDriver_behaviorMQTTDriver.add(state_MQTTDriver_behaviorMQTTDriver_Idle);
state_MQTTDriver_behaviorMQTTDriver.initial(state_MQTTDriver_behaviorMQTTDriver_Idle);
return state_MQTTDriver_behaviorMQTTDriver;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
require_val_port = new Port("require_val", this);
provide_temp_port = new Port("provide_temp", this);
provide_lum_motion_port = new Port("provide_lum_motion", this);
MQTT_port = new Port("MQTT", this);
} else {
require_val_port = ((MQTTDriver)root).require_val_port;
provide_temp_port = ((MQTTDriver)root).provide_temp_port;
provide_lum_motion_port = ((MQTTDriver)root).provide_lum_motion_port;
MQTT_port = ((MQTTDriver)root).MQTT_port;
}
if (session == null){
//Init state machine
behavior = buildMQTTDriver_behaviorMQTTDriver();
}
return this;
}

}
