/**
 * File generated by the ThingML IDE
 * /!\\Do not edit this file/!\\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 */

package org.thingml.generated.gui;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;
import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.text.SimpleDateFormat;

import java.util.*;
public class TimerClientMockMock extends Component implements ActionListener, ItemListener, ITimerClientMock_timer{

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String instanceName;public void printDebug(String trace) {
if(this.isDebug()) {
System.out.println(this.instanceName + trace);
}
}

//Message types
private final Timer_startMessageType timer_startType = new Timer_startMessageType();
private final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
private final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
private final TimeMessageType timeType = new TimeMessageType();
final Port port_TimerClientMock_timer;
public Port getTimer_port(){return port_TimerClientMock_timer;}
public java.util.List<ITimerClientMock_timerClient> timer_listeners = new java.util.LinkedList<ITimerClientMock_timerClient>();
private SimpleDateFormat dateFormat=new SimpleDateFormat("dd MMM yyy 'at' HH:mm:ss.SSS");

private JTabbedPane tabbedPane=new JTabbedPane();
private JFrame frame;

        //Attributes related to timer_start via timer
public JButton sendtimer_start_via_timer;
private JTextField fieldtimer_start_via_timer_Delay;
public JTextField getFieldtimer_start_via_timer_Delay() {
return fieldtimer_start_via_timer_Delay;
}

public JButton getSendtimer_start_via_timer() {
return sendtimer_start_via_timer;
}

//Attributes related to timer_cancel via timer
public JButton sendtimer_cancel_via_timer;
public JButton getSendtimer_cancel_via_timer() {
return sendtimer_cancel_via_timer;
}

public void disableAll() {
sendtimer_start_via_timer.setEnabled(false);
sendtimer_cancel_via_timer.setEnabled(false);
}

public void enableAll() {
sendtimer_start_via_timer.setEnabled(true);
sendtimer_cancel_via_timer.setEnabled(true);
}



private JTextPane screen;
private JButton clearButton;
private JButton cliButton;
private StyledDocument doc;
private final Color alertColor=new Color(255,64,32);
private boolean colorOutput=false;
private JCheckBox showColor;
private JTextField cli;
private JList<Command>commands;

private synchronized boolean isColorOutput(){
        return colorOutput;
        }

private synchronized void setColorOutput(boolean value){
        this.colorOutput=value;
        }

public TimerClientMockMock(String name){
        super(name);
        init();
        port_TimerClientMock_timer = new Port("timer", this);

        initGUI(name);
        }

@Override
public void stop(){
        super.stop();
        frame.setVisible(false);
        }

@Override
public void start(){
        super.start();
        frame.setVisible(true);
        }

@Override
public Component buildBehavior(String session,Component root){
        behavior = new CompositeState("TimerClientMock", true){
        	@Override
        	public void handle(final Event event, final Status status){
        		final Port p = event.getPort();
        		if(p!=null){
        			print(event.getType().getName() + "_via_" + p.getName(),dateFormat.format(new Date())+": " + p.getName() + "?"+event.toString());
        		}
        	}
        };
        return this;
}

        public JPanel createtimer_start_via_timerPanel(){
GridBagConstraints c = new GridBagConstraints();
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
JPanel panel = new JPanel(new GridBagLayout());
JLabel labeldelay = new JLabel();
labeldelay.setText("delay");
c.gridx = 0;
c.gridy = 0;
panel.add(labeldelay, c);
fieldtimer_start_via_timer_Delay = new JTextField();
fieldtimer_start_via_timer_Delay.setText("int");
c.gridx = 1;
c.gridy = 0
;panel.add(fieldtimer_start_via_timer_Delay, c);
return panel;
}

public JPanel createtimer_cancel_via_timerPanel(){
GridBagConstraints c = new GridBagConstraints();
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
JPanel panel = new JPanel(new GridBagLayout());
return panel;
}



public void print(String id,String data){
        try{
        if(isColorOutput())
        doc.insertString(doc.getLength(),formatForPrint(data),doc.getStyle(id));
        else
        doc.insertString(doc.getLength(),formatForPrint(data),null);
        screen.setCaretPosition(doc.getLength());
        }catch(BadLocationException ex){
        ex.printStackTrace();
        }
        }

        public void addListener(ActionListener l){
sendtimer_start_via_timer.addActionListener(l);
sendtimer_cancel_via_timer.addActionListener(l);
}



private void initGUI(String name){

        GridBagConstraints c=new GridBagConstraints();
        c.gridwidth=1;
        c.fill=GridBagConstraints.HORIZONTAL;
        c.insets=new Insets(0,3,0,3);
        c.weightx=0.5;
        c.weighty=0;


        c.gridy=0;
        c.gridx=0;
        frame=new JFrame(name);
        frame.setLayout(new GridBagLayout());
        frame.add(tabbedPane,c);

        JPanel frame_timer = new JPanel();
frame_timer.setLayout(new GridBagLayout());
//GUI related to timer_via_timer => timer_start
c.gridy = 0;
c.gridx = 0;
frame_timer.add(createLabel("timer_start"), c);
c.gridy = 1;
c.gridx = 0;
frame_timer.add(createtimer_start_via_timerPanel(), c);
c.gridy = 2;
c.gridx = 0;
c.weighty = 0;
sendtimer_start_via_timer = createSendButton("timer => timer_start");
frame_timer.add(sendtimer_start_via_timer, c);
tabbedPane.addTab("timer", frame_timer);
//GUI related to timer_via_timer => timer_cancel
c.gridy = 0;
c.gridx = 1;
frame_timer.add(createLabel("timer_cancel"), c);
c.gridy = 1;
c.gridx = 1;
frame_timer.add(createtimer_cancel_via_timerPanel(), c);
c.gridy = 2;
c.gridx = 1;
c.weighty = 0;
sendtimer_cancel_via_timer = createSendButton("timer => timer_cancel");
frame_timer.add(sendtimer_cancel_via_timer, c);
tabbedPane.addTab("timer", frame_timer);


        c.gridy=1;
        c.gridx=0;
        c.gridwidth=1;
        c.fill=GridBagConstraints.BOTH;

        c.weighty=0;
        JPanel cliPanel=new JPanel();
        cliPanel.setLayout(new FlowLayout());
        JLabel cliLabel=new JLabel("Command line: ");
        cli=new JTextField("port!message(param1, param2, param3)");
        cliButton=new JButton("Send");
        cliPanel.add(cliLabel);
        cliPanel.add(cli);
        cliPanel.add(cliButton);
        frame.add(cliPanel,c);
        cliButton.addActionListener(this);

        c.gridx=0;
        c.gridy=2;
        c.weighty=1;
        frame.add(createJTextPane(),c);


        c.gridy=2;
        c.weighty=0;
        clearButton=new JButton("Clear Console");
        frame.add(clearButton,c);

        c.gridy=3;
        c.gridx=0;
        showColor=new JCheckBox("Colored logs");
        showColor.addItemListener(this);
        frame.add(showColor,c);

        commands=new JList<Command>();
        commands.setModel(new DefaultListModel<Command>());
        commands.setVisible(true);
        commands.setLayout(new GridBagLayout());
        c.gridx=1;
        c.gridy=0;
        c.weighty=1;
        c.gridheight=4;
        c.fill=GridBagConstraints.BOTH;
        frame.add(new JScrollPane(commands),c);


        frame.setMinimumSize(new Dimension(480,480));
        frame.pack();
        clearButton.addActionListener(this);
        addListener(this);
        frame.setVisible(true);
        }

public static JLabel createLabel(String name){
        return new JLabel(name);
        }

public static JButton createSendButton(String name){
        return new JButton("send");
        }

public JScrollPane createJTextPane(){
        screen=new JTextPane();
        screen.setFocusable(false);
        screen.setEditable(false);
        screen.setAutoscrolls(true);

        JScrollPane editorScrollPane=new JScrollPane(screen);
        editorScrollPane.setVerticalScrollBarPolicy(
        JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        //editorScrollPane.setPreferredSize(new Dimension(480,240));
        //editorScrollPane.setMinimumSize(new Dimension(320,160));

        doc=screen.getStyledDocument();
        //Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);\n"

        Style receivetimer_timeout_via_timerStyle = doc.addStyle("timer_timeout_via_timer", null);
StyleConstants.setBackground(receivetimer_timeout_via_timerStyle, new Color(240, 242, 227));


        return editorScrollPane;
        }

private String formatForPrint(String text){
        return(text.endsWith("\n")?text:text+"\n");
        }

private void parseAndExecute(String command){
        String[]params=command.split("!");
        if(params.length!=2){
        cliButton.setForeground(alertColor);
        cli.setText("port!message(param1, param2, param3)");
        return;
        }

        if(params[0].equals("timer")) {
if (params[1].startsWith("timer_start")) {
params[1] = params[1].substring("timer_start".length(), params[1].length());
if (!(params[1].startsWith("(") && params[1].endsWith(")"))) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
params = params[1].substring(1,params[1].length()-1).split(",");
if (!(params.length == 1)) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
try {
Map<String, Object> param = new HashMap<String, Object>();
param.put("delay", StringHelper.toObject (int.class, params[0].trim()));
Command c = new Command(port_TimerClientMock_timer, timer_startType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
cliButton.setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message timer_start on port timer. Please try again with proper parameters");
cliButton.setForeground(alertColor);
}
}
else if (params[1].startsWith("timer_cancel")) {
params[1] = params[1].substring("timer_cancel".length(), params[1].length());
if (!(params[1].startsWith("(") && params[1].endsWith(")"))) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
params = params[1].substring(1,params[1].length()-1).split(",");
if (params[0].equals(""))
params = new String[0];
if (!(params.length == 0)) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
try {
Map<String, Object> param = new HashMap<String, Object>();
Command c = new Command(port_TimerClientMock_timer, timer_cancelType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
cliButton.setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message timer_cancel on port timer. Please try again with proper parameters");
cliButton.setForeground(alertColor);
}
}
}


        else{
        cliButton.setForeground(alertColor);
        cli.setText("port!message(param1, param2, param3)");
        }
        }

@Override
public void actionPerformed(ActionEvent ae){
        if(ae.getSource()==cliButton){
        parseAndExecute(cli.getText());
        }
        else if(ae.getSource()==clearButton){
        screen.setText("");
        }
        else if ( ae.getSource() == getSendtimer_start_via_timer()) {
try{
Map<String, Object> param = new HashMap<String, Object>();
param.put("delay", StringHelper.toObject (int.class, getFieldtimer_start_via_timer_Delay().getText()));
Command c = new Command(port_TimerClientMock_timer, timer_startType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
for(ITimerClientMock_timerClient l : timer_listeners)
l.timer_start_from_timer((Integer)StringHelper.toObject (int.class, getFieldtimer_start_via_timer_Delay().getText()));
getSendtimer_start_via_timer().setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message timer_start on port timer. Please try again with proper parameters");
getSendtimer_start_via_timer().setForeground(alertColor);
}
}
else if ( ae.getSource() == getSendtimer_cancel_via_timer()) {
try{
Map<String, Object> param = new HashMap<String, Object>();
Command c = new Command(port_TimerClientMock_timer, timer_cancelType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
for(ITimerClientMock_timerClient l : timer_listeners)
l.timer_cancel_from_timer();
getSendtimer_cancel_via_timer().setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message timer_cancel on port timer. Please try again with proper parameters");
getSendtimer_cancel_via_timer().setForeground(alertColor);
}
}

        }

@Override
public void itemStateChanged(ItemEvent e){
        Object source=e.getItemSelectable();
        if(source==showColor){
        setColorOutput(!isColorOutput());
        }
        }
@Override
public synchronized void timer_timeout_via_timer(){
print("timer_timeout_via_timer", "TODO");
}
}
