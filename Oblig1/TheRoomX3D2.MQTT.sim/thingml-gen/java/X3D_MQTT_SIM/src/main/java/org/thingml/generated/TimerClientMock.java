/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : TimerClientMock
 **/
public class TimerClientMock extends Component implements ITimerClientMock_timer {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

public synchronized void timer_timeout_via_timer(){
final Event _msg = timer_timeoutType.instantiate();
_msg.setPort(timer_port);
receive(_msg);
}

private void sendTimer_start_via_timer(int TimerMsgs_timer_start_delay_var){
timer_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_timer(){
timer_port.send(timer_cancelType.instantiate());
}

//Attributes
//Ports
private Port timer_port;
//Message types
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
protected final TimeMessageType timeType = new TimeMessageType();
//Empty Constructor
public TimerClientMock() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getTimer_port() {
return timer_port;
}
public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
timer_port = new Port("timer", this);
} else {
timer_port = ((TimerClientMock)root).timer_port;
}
if (session == null){
//Init state machine
}
return this;
}

}
